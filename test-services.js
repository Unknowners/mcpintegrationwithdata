/**
 * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ OnboardAI
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∞—Ü—é—é—Ç—å –≤—Å—ñ MCP —Å–µ—Ä–≤–µ—Ä–∏ —Ç–∞ –æ—Å–Ω–æ–≤–Ω–∏–π API
 */

const axios = require('axios');
const colors = require('colors/safe');

const SERVICES = {
  onboardai_api: 'http://localhost:8000',
  mcp_jira: 'http://localhost:3001',
  mcp_notion: 'http://localhost:3022'
};

async function testService(name, baseUrl, endpoints = []) {
  console.log(colors.blue(`\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ${name}...`));
  
  try {
    // –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint
    const response = await axios.get(`${baseUrl}/`, { timeout: 5000 });
    console.log(colors.green(`‚úÖ ${name} –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ ${baseUrl}/`));
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.data.status || 'OK'}`);
    
    // –¢–µ—Å—Ç health endpoint
    try {
      const healthResponse = await axios.get(`${baseUrl}/health`, { timeout: 5000 });
      console.log(colors.green(`‚úÖ Health check –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ`));
      console.log(`   –°—Ç–∞—Ç—É—Å: ${JSON.stringify(healthResponse.data.status)}`);
    } catch (healthError) {
      console.log(colors.yellow(`‚ö†Ô∏è  Health check –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (—Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)`));
    }
    
    // –¢–µ—Å—Ç –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö endpoints
    for (const endpoint of endpoints) {
      try {
        await axios.get(`${baseUrl}${endpoint}`, { timeout: 5000 });
        console.log(colors.green(`‚úÖ Endpoint ${endpoint} –ø—Ä–∞—Ü—é—î`));
      } catch (endpointError) {
        console.log(colors.yellow(`‚ö†Ô∏è  Endpoint ${endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π`));
      }
    }
    
    return true;
  } catch (error) {
    console.log(colors.red(`‚ùå ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ ${baseUrl}`));
    console.log(`   –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    return false;
  }
}

async function testIntegration(apiBaseUrl, mcpBaseUrls) {
  console.log(colors.blue(`\nüîó –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –º—ñ–∂ —Å–µ—Ä–≤—ñ—Å–∞–º–∏...`));
  
  try {
    // –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–∏–π API
    const onboardingData = {
      name: "Test User",
      email: "test@company.com", 
      role: "Frontend Developer",
      department: "Engineering",
      start_date: "2024-01-15",
      manager_email: "manager@company.com",
      skills_required: ["React", "JavaScript"],
      resources_needed: ["Laptop"]
    };
    
    const response = await axios.post(`${apiBaseUrl}/api/v1/onboarding/create`, onboardingData, { 
      timeout: 10000,
      headers: { 'Content-Type': 'application/json' }
    });
    
    console.log(colors.green(`‚úÖ –û—Å–Ω–æ–≤–Ω–∏–π API —Å—Ç–≤–æ—Ä—é—î –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ`));
    console.log(`   Employee ID: ${response.data.employee_id}`);
    console.log(`   –ó–∞–≤–¥–∞–Ω–æ –≤–∏–∫–æ–Ω–∞–ª–æ—Å—å: ${response.data.tasks.length}`);
    console.log(`   –†–µ—Å—É—Ä—Å—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ: ${response.data.resources.length}`);
    
    // –¢–µ—Å—Ç –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏
    if (mcpBaseUrls.jira) {
      try {
        const jiraResponse = await axios.get(`${mcpBaseUrls.jira}/api/jira/projects`, { timeout: 5000 });
        console.log(colors.green(`‚úÖ Jira MCP –ø–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ –ø—Ä–æ–≥—Ä–µ—Ç—ñ–≤`));
      } catch (error) {
        console.log(colors.yellow(`‚ö†Ô∏è  Jira MCP —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –±–µ–∑ API –∫–ª—é—á—ñ–≤)`));
      }
    }
    
    if (mcpBaseUrls.notion) {
      try {
        const notionResponse = await axios.get(`${mcpBaseUrls.notion}/api/resources/role/Frontend%20Developer`, { timeout: 5000 });
        console.log(colors.green(`‚úÖ Notion MCP –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ—Å—É—Ä—Å–∏`));
        console.log(`   –†–µ—Å—É—Ä—Å—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: ${notionResponse.data.resources.length}`);
      } catch (error) {
        console.log(colors.yellow(`‚ö†Ô∏è  Notion MCP —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î`));
      }
    }
    
    return true;
  } catch (error) {
    console.log(colors.red(`‚ùå –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î: ${error.message}`));
    return false;
  }
}

async function main() {
  console.log(colors.cyan('üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è OnboardAI —Å–µ—Ä–≤—ñ—Å—ñ–≤...\n'));
  
  const results = {};
  
  // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
  results.onboardai_api = await testService('OnboardAI API', SERVICES.onboardai_api, ['/docs']);
  results.mcp_jira = await testService('Jira MCP Server', SERVICES.mcp_jira, ['/api/jira/projects']);
  results.mcp_notion = await testService('Notion MCP Server', SERVICES.mcp_notion, ['/api/resources/role/Frontend%20Developer']);
  
  // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
  results.integration = await testIntegration(SERVICES.onboardai_api, {
    jira: SERVICES.mcp_jira,
    notion: SERVICES.mcp_notion
  });
  
  // –ü—ñ–¥—Å—É–º–æ–∫
  console.log(colors.cyan('\nüìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:'));
  console.log('='.repeat(50));
  
  const services = Object.keys(results).filter(key => !key.includes('integration'));
  const serviceResults = results.integration ? 
    services.map(s => `${s}: ${results[s] ? '‚úÖ' : '‚ùå'}`).join(', ') : 
    '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î';
  
  console.log(colors.green(`–°–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å: ${serviceResults}`));
  console.log(colors.green(`–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è: ${results.integration ? '‚úÖ –ü—Ä–∞—Ü—é—î' : '‚ùå –ù–µ –ø—Ä–∞—Ü—é—î'}`));
  
  const allWorking = Object.values(results).every(result => result === true);
  
  if (allWorking) {
    console.log(colors.green('\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!'));
    console.log(colors.yellow('üì± API –¥–æ–∫—É–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: http://localhost:8000/docs'));
    console.log(colors.yellow('üîß Jira MCP –ø—Ä–∞—Ü—é—î –Ω–∞: http://localhost:3001'));
    console.log(colors.yellow('üìù Notion MCP –ø—Ä–∞—Ü—é—î –Ω–∞: http://localhost:3002'));
  } else {
    console.log(colors.red('\n‚ö†Ô∏è  –°–ï–†–í–Ü–°–ò –ü–†–ê–¶–Æ–Æ–¢–¨ –ß–ê–°–¢–ö–û–í–û'));
    console.log(colors.yellow('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏: docker-compose logs'));
    console.log(colors.yellow('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å: docker-compose restart'));
  }
  
  process.exit(allWorking ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
if (require.main === module) {
  main().catch(error => {
    console.log(colors.red(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`));
    process.exit(1);
  });
}

module.exports = { testService, testIntegration };
