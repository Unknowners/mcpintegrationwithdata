"""
OnboardAI - –û—Å–Ω–æ–≤–Ω–∏–π FastAPI –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ DocuMinds –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ —Ç–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
"""

import os
import json
from typing import Dict, List, Optional
from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import httpx
import redis
from supabase import create_client, Client
from vector_service import VectorService

app = FastAPI(
    title="OnboardAI API",
    description="""
    üöÄ **OnboardAI** - SaaS-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É –Ω–æ–≤–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
    
    ## –û—Å–Ω–æ–≤–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:
    - üéØ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–ª–∞–Ω–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É** –¥–ª—è –Ω–æ–≤–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
    - üìö **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤** –∑ DocuMinds, Notion —Ç–∞ Jira
    - ü§î **Q&A —Å–∏—Å—Ç–µ–º–∞** –∑ –±–∞–∑–æ—é –∑–Ω–∞–Ω—å
    - üìä **–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É** –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    - üîó **–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏** —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä–∏
    
    ## –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞:
    - **FastAPI** –≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é
    - **MCP —Å–µ—Ä–≤–µ—Ä–∏** –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Jira, Notion —Ç–∞ Supabase
    - **Redis** –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —á–µ—Ä–≥–∞–º–∏
    - **Supabase** –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    """,
    version="1.0.0",
    contact={
        "name": "OnboardAI Support",
        "email": "support@onboardai.com",
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    keywords=["onboarding", "employee", "SaaS", "FastAPI", "MCP", "integration"],
    openapi_tags=[
        {
            "name": "health",
            "description": "ü©∫ Health check —Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
        },
        {
            "name": "onboarding",
            "description": "üìã –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å–æ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤",
        },
        {
            "name": "documinds",
            "description": "üóÑÔ∏è –Ü–Ω—Ç–µ–±—Ä–∞—Ü—ñ—è –∑ DocuMinds –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤",
        },
        {
            "name": "qa",
            "description": "ü§î Q&A —Å–∏—Å—Ç–µ–º–∞ —Ç–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω—å",
        },
        {
            "name": "progress",
            "description": "üìä –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É",
        },
        {
            "name": "vectorization",
            "description": "üß† –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞–Ω—å —Ç–∞ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫",
        },
        {
            "name": "ai-knowledge",
            "description": "ü§ñ AI-–ø–æ–º—ñ—á–Ω–∏–∫ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏",
        },
    ],
)

# CORS –º—ñ–¥–µ–ª–≤–∞—Ä–µ
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –æ–±–º–µ–∂–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è DocuMinds Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL", "https://rbmepcfznvcskxayuisp.supabase.co")
SUPABASE_ANON_KEY = os.getenv("SUPABASE_ANON_KEY", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJibWVwY2Z6bnZjc2t4YXl1aXNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MjUzOTAsImV4cCI6MjA3NTAwMTM5MH0.ia2D4eT_VpqKApv4pdgTvHsvOCyR_XoCra73j2ElI9Y")
MCP_JIRA_HOST = os.getenv("MCP_JIRA_HOST", "http://mcp-jira:3001")
MCP_NOTION_HOST = os.getenv("MCP_NOTION_HOST", "http://mcp-notion:3002")
REDIS_URL = os.getenv("REDIS_URL", "redis://redis:6379")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
redis_client = redis.from_url(REDIS_URL)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
vector_service = None
try:
    vector_service = VectorService()
except Exception as e:
    print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–µ–∫—Ç–æ—Ä–Ω–∏–π —Å–µ—Ä–≤—ñ—Å: {e}")

# Pydantic –º–æ–¥–µ–ª—ñ
class EmployeeOnboarding(BaseModel):
    name: str
    email: str
    role: str
    department: str
    start_date: str
    manager_email: str
    skills_required: List[str]
    resources_needed: List[str]

class QAResponse(BaseModel):
    question: str
    answer: str
    confidence: float
    sources: List[str]

class TaskProgress(BaseModel):
    task_id: str
    employee_id: str
    status: str  # "pending", "in_progress", "completed"
    progress_percentage: int
    notes: Optional[str] = None

class KnowledgeBaseEntry(BaseModel):
    title: str
    content: str
    role_specific: bool
    department: Optional[str] = None
    tags: List[str]

class DocuMindsResource(BaseModel):
    id: str
    name: str
    type: str
    url: Optional[str] = None
    integration: str
    last_synced_at: Optional[str] = None

class DocuMindsIntegration(BaseModel):
    id: str
    name: str
    type: str
    status: str

# –ú–æ–¥–µ–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π API
class OnboardingPlanResponse(BaseModel):
    employee_id: str
    personalized_plan: Dict
    estimated_duration_days: int
    tasks: List[Dict]
    resources: List[str]
    qa_sessions: List[Dict]

@app.get("/", tags=["health"], summary="üîç –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API")
async def root():
    """
    –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ OnboardAI API
    
    –ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å, –≤–µ—Ä—Å—ñ—é —Ç–∞ —Å—Ç–∞—Ç—É—Å.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API.
    """
    return {
        "service": "OnboardAI API",
        "version": "1.0.0",
        "description": "–°–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤",
        "status": "running",
        "docs_url": "/docs",
        "redoc_url": "/redoc",
        "openapi_url": "/openapi.json"
    }

@app.get("/health", tags=["health"], summary="üè• Health Check")
async def health_check():
    """
    –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
    
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ç–∞ —Å—Ç–∞–Ω:
    - –û—Å–Ω–æ–≤–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞
    - Supabase –±–∞–∑–∏ –¥–∞–Ω–∏—Ö 
    - Redis –∫–µ—à—É
    - MCP —Å–µ—Ä–≤–µ—Ä—ñ–≤ (Jira, Notion)
    
    –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–∂–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∏.
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase
    try:
        supabase.table("employees").select("count", count="exact").execute()
        supabase_status = "healthy"
    except Exception as e:
        supabase_status = f"error: {str(e)}"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Redis
    try:
        redis_client.ping()
        redis_status = "healthy"
    except Exception as e:
        redis_status = f"error: {str(e)}"
    
    return {
        "status": "healthy",
        "supabase": supabase_status,
        "redis": redis_status,
        "mcp_jira_url": MCP_JIRA_HOST,
        "mcp_notion_url": MCP_NOTION_HOST
    }

@app.post("/api/v1/onboarding/create", response_model=OnboardingPlanResponse, tags=["onboarding"], summary="üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É")
async def create_onboarding_plan(
    employee: EmployeeOnboarding,
    background_tasks: BackgroundTasks
):
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
    
    ## –©–æ —Ä–æ–±–∏—Ç—å:
    1. **–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞** –≤ Supabase
    2. **–ì–µ–Ω–µ—Ä—É—î –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω** –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–ª—ñ —Ç–∞ –Ω–∞–≤–∏—á–æ–∫
    3. **–°—Ç–≤–æ—Ä—é—î –∑–∞–≤–¥–∞–Ω–Ω—è** —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –¥–ª—è —Ä–æ–ª—ñ
    4. **–û—Ç—Ä–∏–º—É—î —Ä–µ—Å—É—Ä—Å–∏** –∑ DocuMinds —Ç–∞ Notion
    5. **–ü–ª–∞–Ω—É—î Q&A —Å–µ—Å—ñ—ó** –∑ –º–µ–Ω—Ç–æ—Ä–æ–º
    6. **–ó–∞–ø—É—Å–∫–∞—î —Ñ–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ** –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ Jira
    
    ## –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    ```json
    {
        "name": "–Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤",
        "email": "ivan@company.com",
        "role": "Frontend Developer",
        "department": "Engineering",
        "start_date": "2024-02-01",
        "manager_email": "manager@company.com",
        "skills_required": ["React", "TypeScript"],
        "resources_needed": ["Development Environment"]
    }
    ```
    
    –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ —Ç–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏.
    """
    
    try:
        # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –≤ Supabase
        employee_data = {
            "name": employee.name,
            "email": employee.email,
            "role": employee.role,
            "department": employee.department,
            "start_date": employee.start_date,
            "manager_email": employee.manager_email,
            "skills_required": employee.skills_required,
            "resources_needed": employee.resources_needed,
            "status": "onboarding_started"
        }
        
        result = supabase.table("employees").insert(employee_data).execute()
        employee_id = result.data[0]["id"]
        
        # –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω—É
        personalized_plan = await generate_personalized_plan(
            employee.role,
            employee.department,
            employee.skills_required
        )
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
        tasks = await create_onboarding_tasks(employee_id, employee.role)
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –∑ Notion —Ç–∞ DocuMinds
        org_domain = await extract_domain_from_email(employee.email)
        resources = await fetch_resources_from_notion(employee.role, org_domain)
        
        # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è Q&A —Å–µ—Å—ñ–π
        qa_sessions = await schedule_qa_sessions(employee_id, employee.role)
        
        # –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞: —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Jira (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        if employee.role in ["Frontend Developer", "Backend Developer", "DevOps Engineer"]:
            background_tasks.add_task(
                sync_with_jira,
                employee_id=employee_id,
                role=employee.role
            )
        
        return OnboardingPlanResponse(
            employee_id=employee_id,
            personalized_plan=personalized_plan,
            estimated_duration_days=personalized_plan.get("duration_days", 14),
            tasks=tasks,
            resources=resources,
            qa_sessions=qa_sessions
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É: {str(e)}")

@app.get("/api/v1/documinds/resources", tags=["documinds"], summary="üìö –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –∑ DocuMinds")
async def get_documinds_resources(
    organization_domain: str,
    integration_type: str = "notion",
    limit: int = 50
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –∑ DocuMinds –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó"""
    
    try:
        # –ó–Ω–∞–π–¥–µ–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ –¥–æ–º–µ–Ω—É
        org_result = supabase.table("organizations")\
            .select("*")\
            .eq("domain", organization_domain)\
            .single()\
            .execute()
        
        if not org_result.data:
            raise HTTPException(status_code=404, detail="–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        org_id = org_result.data["id"]
        
        # –ó–Ω–∞–π–¥–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
        integration_result = supabase.table("integrations")\
            .select("*")\
            .eq("organization_id", org_id)\
            .eq("type", integration_type)\
            .execute()
        
        if not integration_result.data:
            return {
                "success": False,
                "message": f"–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è {integration_type} –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó",
                "resources": []
            }
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
        resources_result = supabase.table("resources")\
            .select("*")\
            .eq("organization_id", org_id)\
            .eq("integration_id", integration_result.data[0]["id"])\
            .eq("status", "active")\
            .limit(limit)\
            .execute()
        
        resources = []
        if resources_result.data:
            for resource in resources_result.data:
                resources.append(DocuMindsResource(
                    id=resource["id"],
                    name=resource["name"],
                    type=resource["type"],
                    url=resource.get("url"),
                    integration=integration_type,
                    last_synced_at=resource.get("last_synced_at")
                ))
        
        return {
            "success": True,
            "organization": organization_domain,
            "integration": integration_type,
            "resources_count": len(resources),
            "resources": resources
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤: {str(e)}")

@app.get("/api/v1/documinds/integrations", tags=["documinds"], summary="üîó –°–ø–∏—Å–æ–∫ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π DocuMinds")
async def get_documinds_integrations(organization_domain: str):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó"""
    
    try:
        # –ó–Ω–∞–π–¥–µ–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
        org_result = supabase.table("organizations")\
            .select("*")\
            .eq("domain", organization_domain)\
            .single()\
            .execute()
        
        if not org_result.data:
            raise HTTPException(status_code=404, detail="–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π
        integrations_result = supabase.table("integrations")\
            .select("*")\
            .eq("organization_id", org_result.data["id"])\
            .eq("status", "connected")\
            .execute()
        
        integrations = []
        if integrations_result.data:
            for integration in integrations_result.data:
                integrations.append(DocuMindsIntegration(
                    id=integration["id"],
                    name=integration["name"],
                    type=integration["type"],
                    status=integration["status"]
                ))
        
        return {
            "success": True,
            "organization": organization_domain,
            "integrations_count": len(integrations),
            "integrations": integrations
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π: {str(e)}")

@app.get("/api/v1/qa/answer", tags=["qa"], summary="üí¨ Q&A —Å–∏—Å—Ç–µ–º–∞")
async def get_qa_answer(question: str, role: str = "general"):
    """
    
    üß† **–†–æ–∑—É–º–Ω–∞ Q&A —Å–∏—Å—Ç–µ–º–∞ –∑ –≤–µ–∫—Ç–æ—Ä–Ω–∏–º –ø–æ—à—É–∫–æ–º**
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞–Ω—å —Ç–∞ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –¥–ª—è —Ç–æ—á–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:
    
    1. **–°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫** –≤ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ–π –±–∞–∑—ñ –∑–Ω–∞–Ω—å
    2. **–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ** –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º AI
    3. **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞** –¥–ª—è –∫–æ–∂–Ω—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    4. **–ö–µ—à—É–≤–∞–Ω–Ω—è** –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    
    ## –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    ```
    GET /api/v1/qa/answer?question=—è–∫_—Ä–æ–∑–ø–æ—á–∞—Ç–∏_—Ä–æ–±–æ—Ç—É&role=Frontend Developer
    ```
    """
    
    try:
        # –ö–µ—à—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –≤ Redis
        cache_key = f"qa:{hash(question + role)}"
        cached_answer = redis_client.get(cache_key)
        
        if cached_answer:
            cached_data = json.loads(cached_answer)
            return QAResponse(
                question=question,
                answer=cached_data["answer"],
                confidence=cached_data["confidence"],
                sources=cached_data.get("sources", [])
            )
        
        answer_data = None
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        if vector_service:
            try:
                answer_data = await vector_service.get_contextual_answer(question, role)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ QAResponse
                answer = QAResponse(
                    question=question,
                    answer=answer_data["answer"],
                    confidence=answer_data["confidence"],
                    sources=[source.get("content", source.get("type", "unknown")) for source in answer_data.get("sources", [])]
                )
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É: {e}")
                answer_data = None
        
        # Fallback –¥–æ —Å—Ç–∞—Ä–æ—ó —Å–∏—Å—Ç–µ–º–∏
        if not answer_data:
            answer = await search_knowledge_base(question, role)
        else:
            # –ö–µ—à—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ 1 –≥–æ–¥–∏–Ω—É
            cache_data = {
                "answer": answer.answer,
                "confidence": answer.confidence,
                "sources": answer.sources
            }
            redis_client.setex(cache_key, 3600, json.dumps(cache_data))
        
        return answer
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {str(e)}")

@app.get("/api/v1/progress/{employee_id}", tags=["progress"], summary="üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É")
async def get_onboarding_progress(employee_id: str):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–µ—Å—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞"""
    
    try:
        progress = supabase.table("onboarding_progress")\
            .select("*")\
            .eq("employee_id", employee_id)\
            .execute()
        
        if not progress.data:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–≥—Ä–µ—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        return progress.data
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É: {str(e)}")

@app.post("/api/v1/progress/update", tags=["progress"], summary="‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è")
async def update_task_progress(progress: TaskProgress):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è"""
    
    try:
        update_data = {
            "status": progress.status,
            "progress_percentage": progress.progress_percentage,
            "notes": progress.notes,
            "updated_at": "now()"
        }
        
        result = supabase.table("onboarding_progress")\
            .update(update_data)\
            .eq("task_id", progress.task_id)\
            .eq("employee_id", progress.employee_id)\
            .execute()
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
        await calculate_overall_progress(progress.employee_id)
        
        return {"message": "–ü—Ä–æ–≥—Ä–µ—Å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ", "data": result.data}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É: {str(e)}")

# –í–µ–∫—Ç–æ—Ä—ñ–∑–∞—Ü—ñ—è —Ç–∞ AI –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏

@app.post("/api/v1/vectorization/start", tags=["vectorization"], summary="üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞–Ω—å")
async def start_vectorization():
    """
    üß† **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞–Ω—å**
    
    –ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è —Ç–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—Å—ñ—î—ó –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:
    
    1. **–ê–Ω–∞–ª—ñ–∑ Supabase –∫—Ä–∞–∞–¥—É** –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π, —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π —Ç–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤
    2. **–†–æ–∑–±–∏–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É** –Ω–∞ chunks –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ø–æ—à—É–∫—É
    3. **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings** —á–µ—Ä–µ–∑ OpenAI
    4. **–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Pinecone** –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É
    
    –ü—Ä–æ—Ü–µ—Å –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 5-15 —Ö–≤–∏–ª–∏–Ω –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ–±—Å—è–≥—É –¥–∞–Ω–∏—Ö.
    """
    
    if not vector_service:
        raise HTTPException(status_code=503, detail="–í–µ–∫—Ç–æ—Ä–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é OpenAI —Ç–∞ Pinecone.")
    
    try:
        result = await vector_service.vectorize_corporate_knowledge()
        
        if "error" in result:
            raise HTTPException(status_code=500, detail=result["error"])
        
        return {
            "success": True,
            "message": "–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            "stats": result["stats"],
            "vector_index": vector_service.pinecone_index_name
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {str(e)}")

@app.get("/api/v1/vectorization/status", tags=["vectorization"], summary="üìä –°—Ç–∞—Ç—É—Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
async def get_vectorization_status():
    """
    üìà **–°—Ç–∞—Ç—É—Å –≤–µ–∫—Ç–æ—Ä—ñ–∑–∞—Ü—ñ—ó –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞–Ω—å**
    
    –ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏ –∑–Ω–∞–Ω—å:
    - –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä—ñ–≤
    - –†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å embeddings
    - –°—Ç–∞—Ç—É—Å —ñ–Ω–¥–µ–∫—Å—É (–≥–æ—Ç–æ–≤–∏–π/–ø–æ—Ä–æ–∂–Ω—ñ–π/–ø–æ–º–∏–ª–∫–∞)
    - –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    """
    
    if not vector_service:
        return {
            "status": "unavailable",
            "error": "–í–µ–∫—Ç–æ—Ä–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
            "vector_service_configured": False
        }
    
    try:
        status = await vector_service.get_vectorization_status()
        
        return {
            "vector_service_configured": True,
            **status
        }
        
    except Exception as e:
        return {
            "status": "error",
            "error": str(e),
            "vector_service_configured": True
        }

@app.post("/api/v1/vectorization/semantic-search", tags=["vectorization"], summary="üîç –°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫")
async def semantic_search(query: str, limit: int = 5):
    """
    üîç **–°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–º –∑–Ω–∞–Ω–Ω—è–º**
    
    –í–∏–∫–æ–Ω—É—î –≤–µ–∫—Ç–æ—Ä–Ω–∏–π –ø–æ—à—É–∫ –ø–æ –≤—Å—ñ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ñ–π –±–∞–∑—ñ –∑–Ω–∞–Ω—å:
    
    - **–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫** –∑–∞–º—ñ—Å—Ç—å —Ç–æ—á–Ω–æ–≥–æ —Å–ø—ñ–≤–ø–∞–¥–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—ñ–≤
    - **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–º–∏—Å–ª—É**, –∞ –Ω–µ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
    - **–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å (confidence score)** –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    - **–ú–µ—Ç–∞–¥–∞–Ω—ñ –¥–∂–µ—Ä–µ–ª** –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ
    """
    
    if not vector_service:
        raise HTTPException(status_code=503, detail="–í–µ–∫—Ç–æ—Ä–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    
    try:
        results = await vector_service.semantic_search(query, limit=limit)
        
        return {
            "success": True,
            "query": query,
            "results_count": len(results),
            "results": results,
            "search_type": "semantic_vector",
            "vector_model": vector_service.embedding_model
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É: {str(e)}")

@app.get("/api/v1/ai/contextual-answer", tags=["ai-knowledge"], summary="ü§ñ AI-–ø–æ–º—ñ—á–Ω–∏–∫ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
async def get_ai_answer(question: str, role: str = "general"):
    """
    ü§ñ **AI-–ø–æ–º—ñ—á–Ω–∏–∫ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏**
    
    –ù–∞–π—Ä–æ–∑—É–º–Ω—ñ—à–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–æ–≤–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤:
    
    ## –Ø–∫ –ø—Ä–∞—Ü—é—î:
    1. **–°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫** –≤ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ–π –±–∞–∑—ñ –∑–Ω–∞–Ω—å
    2. **–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞** —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    3. **AI-–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ** –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º GPT
    4. **–í–∫–∞–∑–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª** —Ç–∞ —Ä—ñ–≤–Ω—è –¥–æ–≤—ñ—Ä–∏
    
    ## –ü–µ—Ä–µ–≤–∞–≥–∏ –ø–µ—Ä–µ–¥ –∑–≤–∏—á–∞–π–Ω–∏–º Q&A:
    - üéØ **–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ** –∑–∞–º—ñ—Å—Ç—å —à–∞–±–ª–æ–Ω–Ω–∏—Ö
    - üìö **–°–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª** –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–≤—á–µ–Ω–Ω—è
    - üé® **–ü—Ä–∏—Ä–æ–¥–Ω—ñ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è** –º–æ–≤–æ—é –∫–æ–º–ø–∞–Ω—ñ—ó
    - üîç **–ì–ª–∏–±–∏–Ω–∏–π –∞–Ω–∞–ª—ñ–∑** –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
    
    ## –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç–∞–Ω—å:
    - "–Ø–∫ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É —è–∫ Frontend Developer?"
    - "–©–æ —Ç–∞–∫–µ –∫–æ–¥ —Å—Ç–∞–π–ª –≤ –Ω–∞—à—ñ–π –∫–æ–º–ø–∞–Ω—ñ—ó?"
    - "–Ø–∫—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–ª—è –¥–µ–ø–ª–æ—é?"
    """
    
    if not vector_service:
        raise HTTPException(status_code=503, detail="AI-–ø–æ–º—ñ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É.")
    
    try:
        result = await vector_service.get_contextual_answer(question, role)
        
        response_data = {
            "success": True,
            "question": question,
            "role_context": role,
            "answer": result["answer"],
            "confidence": result["confidence"],
            "context_found": result["context_found"],
            "sources": result.get("sources", []),
            "relevant_chunks": result.get("relevant_chunks", 0),
            "ai_model": "GPT-3.5-turbo + Semantic Search"
        }
        
        return response_data
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ AI-–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {str(e)}")

@app.get("/api/v1/ai/knowledge-summary", tags=["ai-knowledge"], summary="üìã –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞–Ω—å")
async def get_knowledge_summary(role: str = None):
    """
    üìã **–ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞–Ω—å**
    
    –û—Ç—Ä–∏–º–∞–π—Ç–µ –∑–∞–≥–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥ –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞–Ω—å:
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç—É
    - –î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–Ω–∞–Ω—å
    - –ê–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Ä–æ–ª—ñ
    """
    
    if not vector_service:
        raise HTTPException(status_code=503, detail="–°–µ—Ä–≤—ñ—Å –∑–Ω–∞–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–µ–∫—Ç–æ—Ä—ñ–∑–∞—Ü—ñ—ó
        vector_status = await vector_service.get_vectorization_status()
        
        # –°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ —Ä–æ–ª—å
        role_specific_content = []
        if role:
            test_queries = [
                f"onboarding process for {role}",
                f"technical stack for {role}",
                f"common tasks for {role}",
                f"team structure for {role}"
            ]
            
            for query in test_queries:
                try:
                    results = await vector_service.semantic_search(query, limit=2)
                    role_specific_content.extend(results)
                except:
                    pass
        
        return {
            "vector_status": vector_status,
            "knowledge_categories": [
                "organizations", "integrations", "resources",
                "onboarding_guides", "tech_stack", "processes"
            ],
            "role_specific_content": role_specific_content[:10] if role_specific_content else [],
            "total_vectors": vector_status.get("total_vectors", 0),
            "index_readiness": "ready" if vector_status.get("total_vectors", 0) > 0 else "empty"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–Ω–∞–Ω—å: {str(e)}")

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

async def extract_domain_from_email(email: str) -> str:
    """–í–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –¥–æ–º–µ–Ω—É –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –∑ email –∞–¥—Ä–µ—Å–∏"""
    try:
        domain = email.split('@')[1]
        return domain
    except (IndexError, AttributeError):
        return ""

async def generate_personalized_plan(role: str, department: str, skills: List[str]) -> Dict:
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É"""
    # –ë–∞–∑–æ–≤–∏–π –ø–ª–∞–Ω –¥–ª—è —Ä–æ–ª—ñ
    base_plans = {
        "Frontend Developer": {
            "duration_days": 14,
            "focus_areas": ["React", "TypeScript", "CSS", "Testing"],
            "mentor_assignment": True,
            "pair_programming_sessions": 5
        },
        "Backend Developer": {
            "duration_days": 16,
            "focus_areas": ["Python/Django", "APIs", "Database", "Testing"],
            "mentor_assignment": True,
            "code_review_sessions": 8
        },
        "Data Analyst": {
            "duration_days": 10,
            "focus_areas": ["SQL", "Python/Pandas", "BI Tools", "Statistics"],
            "mentor_assignment": True,
            "data_project_assignment": True
        }
    }
    
    return base_plans.get(role, {
        "duration_days": 14,
        "focus_areas": ["General"],
        "mentor_assignment": True
    })

async def create_onboarding_tasks(employee_id: str, role: str) -> List[Dict]:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É"""
    task_templates = {
        "Frontend Developer": [
            {"title": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è IDE —ñ —Ä–æ–±–æ—á–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞", "duration": 1},
            {"title": "Setup –ø—Ä–æ–µ–∫—Ç—É —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π", "duration": 2},
            {"title": "–Ü–∑—É—á–µ–Ω–Ω—è –∫–æ–¥—É–±–∞–∑–∏ —Ç–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏", "duration": 3},
            {"title": "–ü–µ—Ä—à–µ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç –∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º", "duration": 5}
        ],
        "Backend Developer": [
            {"title": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞", "duration": 1},
            {"title": "–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö", "duration": 2},
            {"title": "–Ü–∑—É—á–µ–Ω–Ω—è API –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏", "duration": 3},
            {"title": "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É", "duration": 7}
        ]
    }
    
    tasks = task_templates.get(role, [
        {"title": "–ó–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑ –∫–æ–º–ø–∞–Ω—ñ—î—é", "duration": 1},
        {"title": "–û–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ—Ü–µ—Å–∞–º–∏", "duration": 2},
        {"title": "–ü–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–≤—á–∞–Ω–Ω—è", "duration": 3}
    ])
    
    # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    for i, task in enumerate(tasks):
        task_data = {
            "employee_id": employee_id,
            "task_name": task["title"],
            "duration_days": task["duration"],
            "priority": "high" if i < 2 else "medium",
            "status": "pending"
        }
        supabase.table("onboarding_tasks").insert(task_data).execute()
    
    return tasks

async def fetch_resources_from_notion(role: str, org_domain: str = "") -> List[str]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –∑ DocuMinds —Ç–∞ Notion —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä"""
    
    resources = []
    
    # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ DocuMinds —è–∫—â–æ —î –¥–æ–º–µ–Ω –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
    if org_domain:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"http://localhost:8000/api/v1/documinds/resources",
                    params={
                        "organization_domain": org_domain,
                        "integration_type": "notion",
                        "limit": 10
                    }
                )
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success"):
                        resources.extend([resource["name"] for resource in data.get("resources", [])])
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –∑ DocuMinds: {e}")
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ä–µ—Å—É—Ä—Å—ñ–≤ –∑ DocuMinds, —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä
    if not resources:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{MCP_NOTION_HOST}/api/resources/role/{role}"
                )
                if response.status_code == 200:
                    resources.extend(response.json().get("resources", []))
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –∑ MCP Notion: {e}")
    
    # Fallback —Ä–µ—Å—É—Ä—Å–∏ —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏
    if not resources:
        resources = [
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –∫–æ–º–ø–∞–Ω—ñ—ó",
            "FAQ –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤",
            "–ì–∞–π–¥–ª–∞–π–Ω –ø–æ —Ä–æ–ª—ñ"
        ]
    
    return resources

async def schedule_qa_sessions(employee_id: str, role: str) -> List[Dict]:
    """–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è Q&A —Å–µ—Å—ñ–π"""
    return [
        {
            "session_type": "one_on_one",
            "scheduled_for": "Day 3",
            "topics": ["–ó–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è"]
        },
        {
            "session_type": "team_introduction",
            "scheduled_for": "Day 5",
            "topics": ["–ó–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑ –∫–æ–º–∞–Ω–¥–æ—é"]
        }
    ]

async def sync_with_jira(employee_id: str, role: str):
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Jira —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä"""
    try:
        async with httpx.AsyncClient() as client:
            data = {
                "employee_id": employee_id,
                "role": role,
                "action": "create_onboarding_tasks"
            }
            await client.post(f"{MCP_JIRA_HOST}/api/jira/sync", json=data)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ Jira: {e}")

async def search_knowledge_base(question: str, role: str) -> QAResponse:
    """–ü–æ—à—É–∫ –≤ –±–∞–∑—ñ –∑–Ω–∞–Ω—å"""
    # –°–ø—Ä–æ—â–µ–Ω–∏–π –ø–æ—à—É–∫ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –≤–µ–∫—Ç–æ—Ä–Ω–∏–π –ø–æ—à—É–∫
    mock_answers = {
        "—è–∫ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É": {
            "answer": "–î–ª—è —Å—Ç–∞—Ä—Ç—É —Ä–æ–±–æ—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –±–∞–∑–æ–≤–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —Ç–∞ –ø—Ä–æ–π—Ç–∏ –ø–µ—Ä–≤–∏–Ω–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ä–æ–∑—Ä–æ–±–∫–∏.",
            "confidence": 0.95,
            "sources": ["Employee Handbook", "Getting Started Guide"]
        },
        "—è–∫ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ git": {
            "answer": "Git –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–µ—Ä—Å—ñ–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é. –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: git clone, git add, git commit, git push.",
            "confidence": 0.90,
            "sources": ["Git Guide", "Development Workflow"]
        }
    }
    
    question_lower = question.lower()
    for key, answer_data in mock_answers.items():
        if key in question_lower:
            return QAResponse(
                question=question,
                answer=answer_data["answer"],
                confidence=answer_data["confidence"],
                sources=answer_data["sources"]
            )
    
    return QAResponse(
        question=question,
        answer="–Ø –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —É –±–∞–∑—ñ –∑–Ω–∞–Ω—å. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω—Ç–æ—Ä–∞ –∞–±–æ HR-—Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞.",
        confidence=0.30,
        sources=["General Knowledge Base"]
    )

async def calculate_overall_progress(employee_id: str):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É"""
    try:
        progress_data = supabase.table("onboarding_progress")\
            .select("*")\
            .eq("employee_id", employee_id)\
            .execute()
        
        if progress_data.data:
            total_tasks = len(progress_data.data)
            completed_tasks = len([task for task in progress_data.data if task["status"] == "completed"])
            overall_progress = int((completed_tasks / total_tasks) * 100) if total_tasks > 0 else 0
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
            supabase.table("employees")\
                .update({"overall_progress": overall_progress})\
                .eq("id", employee_id)\
                .execute()
                
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É: {e}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
