#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è OnboardAI –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –Ω–∞ live –¥–æ–º–µ–Ω—ñ
 */

const axios = require('axios');

class OnboardAITester {
  constructor() {
    this.baseUrl = 'https://ai-hack-mcpetc-gcbplx-d53e53-157-180-26-155.traefik.me';
    this.timeout = 10000; // 10 —Å–µ–∫—É–Ω–¥
  }

  async testEndpoint(path, method = 'GET', data = null) {
    try {
      console.log(`üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${method} ${path}`);
      
      const config = {
        method,
        url: `${this.baseUrl}${path}`,
        timeout: this.timeout,
        validateStatus: () => true, // –ü—Ä–∏–π–º–∞—î–º–æ –±—É–¥—å-—è–∫–∏–π —Å—Ç–∞—Ç—É—Å
        httpsAgent: new (require('https').Agent)({
          rejectUnauthorized: false // –Ü–≥–Ω–æ—Ä—É—î–º–æ SSL –ø–æ–º–∏–ª–∫–∏
        })
      };

      if (data) {
        config.data = data;
        config.headers = { 'Content-Type': 'application/json' };
      }

      const response = await axios(config);
      
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log(`   üìù –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.data ? JSON.stringify(response.data).substring(0, 100) + '...' : 'Empty'}`);
      
      return {
        success: response.status >= 200 && response.status < 300,
        status: response.status,
        data: response.data
      };
    } catch (error) {
      console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
      return {
        success: false,
        error: error.message
      };
    }
  }

  async testAllEndpoints() {
    console.log("üåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è OnboardAI –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –Ω–∞ live –¥–æ–º–µ–Ω—ñ");
    console.log(`üîó –î–æ–º–µ–Ω: ${this.baseUrl}`);
    console.log("=" * 60);

    const endpoints = [
      // –û—Å–Ω–æ–≤–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
      { path: '/', method: 'GET' },
      { path: '/health', method: 'GET' },
      { path: '/docs', method: 'GET' },
      { path: '/redoc', method: 'GET' },
      { path: '/openapi.json', method: 'GET' },
      
      // API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
      { path: '/api/v1/onboarding/create', method: 'POST', data: {
        name: "Test User",
        email: "test@techcorp.com",
        role: "Frontend Developer",
        department: "Engineering",
        start_date: "2024-02-01",
        manager_email: "manager@techcorp.com",
        skills_required: ["React", "TypeScript"],
        resources_needed: ["Development Environment"]
      }},
      { path: '/api/v1/documinds/resources?organization_domain=techcorp.com', method: 'GET' },
      { path: '/api/v1/documinds/integrations?organization_domain=techcorp.com', method: 'GET' },
      { path: '/api/v1/qa/answer?question=test&role=Frontend Developer', method: 'GET' },
      { path: '/api/v1/progress/test-employee-id', method: 'GET' },
      { path: '/api/v1/vectorization/status', method: 'GET' },
      { path: '/api/v1/ai/knowledge-summary?organization_domain=techcorp.com', method: 'GET' },
      
      // MCP —Å–µ—Ä–≤–µ—Ä–∏ (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ)
      { path: '/mcp/supabase/health', method: 'GET' },
      { path: '/mcp/jira/health', method: 'GET' },
      { path: '/mcp/notion/health', method: 'GET' }
    ];

    const results = [];
    
    for (const endpoint of endpoints) {
      const result = await this.testEndpoint(endpoint.path, endpoint.method, endpoint.data);
      results.push({
        endpoint: endpoint.path,
        method: endpoint.method,
        ...result
      });
      console.log(''); // –ü—É—Å—Ç–∏–π —Ä—è–¥–æ–∫ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
    }

    // –ü—ñ–¥—Å—É–º–æ–∫
    console.log("\nüìä –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:");
    console.log("=" * 30);
    
    const successful = results.filter(r => r.success).length;
    const total = results.length;
    
    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: ${successful}/${total}`);
    console.log(`‚ùå –ù–µ–≤–¥–∞–ª–∏—Ö: ${total - successful}/${total}`);
    
    console.log("\nüéØ –£—Å–ø—ñ—à–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏:");
    results.filter(r => r.success).forEach(r => {
      console.log(`   ‚úÖ ${r.method} ${r.endpoint} (${r.status})`);
    });
    
    console.log("\n‚ùå –ù–µ–≤–¥–∞–ª—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏:");
    results.filter(r => !r.success).forEach(r => {
      console.log(`   ‚ùå ${r.method} ${r.endpoint} (${r.status || 'Error'})`);
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    console.log("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:");
    if (successful === 0) {
      console.log("üö® –°–µ—Ä–≤—ñ—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π");
      console.log("   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä");
      console.log("   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Traefik");
      console.log("   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤—ñ—Å—É");
    } else if (successful < total / 2) {
      console.log("‚ö†Ô∏è –ß–∞—Å—Ç–∫–æ–≤–æ –ø—Ä–∞—Ü—é—î");
      console.log("   - –î–µ—è–∫—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ");
      console.log("   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å–µ—Ä–≤—ñ—Å—ñ–≤");
    } else {
      console.log("üéâ –ë—ñ–ª—å—à—ñ—Å—Ç—å —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø—Ä–∞—Ü—é—î!");
      console.log("   - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó");
    }

    return results;
  }

  async testSpecificService(serviceName) {
    console.log(`üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É: ${serviceName}`);
    console.log("=" * 40);

    const serviceEndpoints = {
      'onboardai-api': [
        { path: '/health', method: 'GET' },
        { path: '/docs', method: 'GET' },
        { path: '/api/v1/onboarding/create', method: 'POST' }
      ],
      'supabase-mcp': [
        { path: '/mcp/supabase/health', method: 'GET' },
        { path: '/mcp/supabase/api/organizations', method: 'GET' }
      ],
      'jira-mcp': [
        { path: '/mcp/jira/health', method: 'GET' },
        { path: '/mcp/jira/api/onboarding-tasks', method: 'GET' }
      ],
      'notion-mcp': [
        { path: '/mcp/notion/health', method: 'GET' },
        { path: '/mcp/notion/api/onboarding-resources', method: 'GET' }
      ]
    };

    const endpoints = serviceEndpoints[serviceName] || [];
    
    for (const endpoint of endpoints) {
      await this.testEndpoint(endpoint.path, endpoint.method, endpoint.data);
      console.log('');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
if (require.main === module) {
  const tester = new OnboardAITester();
  
  const args = process.argv.slice(2);
  if (args.length > 0) {
    // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
    tester.testSpecificService(args[0]).catch(console.error);
  } else {
    // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
    tester.testAllEndpoints().catch(console.error);
  }
}

module.exports = OnboardAITester;
