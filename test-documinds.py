#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ DocuMinds Supabase
"""

import os
from supabase import create_client, Client

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è DocuMinds
SUPABASE_URL = "https://rbmepcfznvcskxayuisp.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJibWVwY2Z6bnZjc2t4YXl1aXNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MjUzOTAsImV4cCI6MjA3NTAwMTM5MH0.ia2D4eT_VpqKApv4pdgTvHsvOCyR_XoCra73j2ElI9Y"

def test_supabase_connection():
    try:
        print("üîó –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ DocuMinds Supabase...")
        
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
        print(f"‚úÖ Supabase –∫–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è: {SUPABASE_URL}")
        
        # –¢–µ—Å—Ç —Å–ø–∏—Å–∫—É —Ç–∞–±–ª–∏—Ü—å —á–µ—Ä–µ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—É —Å—Ö–µ–º—É
        print("\nüìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å...")
        
        # –°–ø—Ä–æ—â–µ–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ info_schema —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        try:
            # –°–ø—Ä–æ–±–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
            result = supabase.table("organizations").select("id, name, domain").limit(5).execute()
            if result.data:
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü—è 'organizations' –¥–æ—Å—Ç—É–ø–Ω–∞ ({len(result.data)} –∑–∞–ø–∏—Å—ñ–≤)")
                for org in result.data:
                    print(f"   - {org['name']} ({org.get('domain', 'No domain')})")
            else:
                print("‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü—è 'organizations' –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ organizations: {e}")
        
        # –¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π
        try:
            result = supabase.table("integrations").select("id, name, type, status").limit(5).execute()
            if result.data:
                print(f"\n‚úÖ –¢–∞–±–ª–∏—Ü—è 'integrations' –¥–æ—Å—Ç—É–ø–Ω–∞ ({len(result.data)} –∑–∞–ø–∏—Å—ñ–≤)")
                for integration in result.data:
                    print(f"   - {integration['name']} ({integration['type']}) - {integration['status']}")
            else:
                print("\n‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü—è 'integrations' –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
        except Exception as e:
            print(f"\n‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ integrations: {e}")
        
        # –¢–µ—Å—Ç —Ä–µ—Å—É—Ä—Å—ñ–≤
        try:
            result = supabase.table("resources").select("id, name, type, integration").limit(5).execute()
            if result.data:
                print(f"\n‚úÖ –¢–∞–±–ª–∏—Ü—è 'resources' –¥–æ—Å—Ç—É–ø–Ω–∞ ({len(result.data)} –∑–∞–ø–∏—Å—ñ–≤)")
                for resource in result.data:
                    print(f"   - {resource['name']} ({resource['type']}) - {resource.get('integration', 'Unknown')}")
            else:
                print("\n‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü—è 'resources' –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
        except Exception as e:
            print(f"\n‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ resources: {e}")
        
        print("\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase: {e}")
        return False

if __name__ == "__main__":
    test_supabase_connection()
