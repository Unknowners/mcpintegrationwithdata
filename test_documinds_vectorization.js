#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ DocuMinds —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π Notion/Jira
 */

require('dotenv').config();
const axios = require('axios');

const DOCUMINDS_CONFIG = {
  url: 'https://rbmepcfznvcskxayuisp.supabase.co',
  anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJibWVwY2Z6bnZjc2t4YXl1aXNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MjUzOTAsImV4cCI6MjA3NTAwMTM5MH0.ia2D4eT_VpqKApv4pdgTvHsvOCyR_XoCra73j2ElI9Y',
  apiUrl: 'https://rbmepcfznvcskxayuisp.supabase.co/rest/v1'
};

class DocuMindsVectorTester {
  constructor() {
    this.headers = {
      'apikey': DOCUMINDS_CONFIG.anonKey,
      'Authorization': `Bearer ${DOCUMINDS_CONFIG.anonKey}`,
      'Content-Type': 'application/json'
    };
  }

  async testDocsSearch() {
    console.log("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è DocuMinds —Å—Ö–µ–º–∏...");
    
    try {
      // –¢–µ—Å—Ç 1: –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
      console.log("\nüìä –¢–∞–±–ª–∏—Ü—è organizations:");
      const orgsResponse = await axios.get(`${DOCUMINDS_CONFIG.apiUrl}/organizations`, {
        headers: this.headers,
        params: { select: 'id,name,domain,plan,status' }
      });
      
      if (orgsResponse.data && orgsResponse.data.length > 0) {
        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${orgsResponse.data.length} –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π:`);
        orgsResponse.data.forEach(org => {
          console.log(`   - ${org.name} (${org.domain}) - ${org.plan} ${org.status}`);
        });
      } else {
        console.log("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è organizations –ø–æ—Ä–æ–∂–Ω—è");
      }

      // –¢–µ—Å—Ç 2: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
      console.log("\nüîó –¢–∞–±–ª–∏—Ü—è integrations:");
      const integrationsResponse = await axios.get(`${DOCUMINDS_CONFIG.apiUrl}/integrations`, {
        headers: this.headers,
        params: { select: 'id,organization_id,name,type,status' }
      });
      
      if (integrationsResponse.data && integrationsResponse.data.length > 0) {
        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${integrationsResponse.data.length} —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π:`);
        integrationsResponse.data.forEach(integration => {
          console.log(`   - ${integration.name} (${integration.type}) - ${integration.status}`);
        });
      } else {
        console.log("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è integrations –ø–æ—Ä–æ–∂–Ω—è");
      }

      // –¢–µ—Å—Ç 3: –†–µ—Å—É—Ä—Å–∏  
      console.log("\nüìö –¢–∞–±–ª–∏—Ü—è resources:");
      const resourcesResponse = await axios.get(`${DOCUMINDS_CONFIG.apiUrl}/resources`, {
        headers: this.headers,
        params: { select: 'id,organization_id,name,type,url,status' }
      });
      
      if (resourcesResponse.data && resourcesResponse.data.length > 0) {
        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${resourcesResponse.data.length} —Ä–µ—Å—É—Ä—Å—ñ–≤:`);
        resourcesResponse.data.forEach(resource => {
          console.log(`   - ${resource.name} (${resource.type}) - ${resource.status}`);
        });
      } else {
        console.log("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è resources –ø–æ—Ä–æ–∂–Ω—è");
      }

      return {
        organizations: orgsResponse.data || [],
        integrations: integrationsResponse.data || [],
        resources: resourcesResponse.data || []
      };

    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ DocuMinds:", error.message);
      return { organizations: [], integrations: [], resources: [] };
    }
  }

  generateSampleKnowledge(chunkData) {
    console.log("\nüß† –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –∑—Ä–∞–∑–∫–æ–≤–∏—Ö –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞–Ω—å –¥–ª—è –≤–µ–∫—Ç–æ—Ä—ñ–∑–∞—Ü—ñ—ó...");
    
    const knowledgeItems = [];
    
    // –ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π
    chunkData.organizations.forEach(org => {
      const orgContent = `
        –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è: ${org.name}
        –î–æ–º–µ–Ω: ${org.domain}
        –¢–∞—Ä–∏—Ñ–Ω–∏–π –ø–ª–∞–Ω: ${org.plan}
        –°—Ç–∞—Ç—É—Å: ${org.status}
        
        –û—Å–Ω–æ–≤–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é:
        - –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏ —Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏
        - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
        - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥ —Ç–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ñ–≤
        - –ü—Ä–∞–≤–∏–ª–∞ —Ç–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ —Ä–æ–±–æ—Ç–∏
      `;
      
      knowledgeItems.push({
        source: "documinds",
        table: "organizations",
        id: org.id,
        name: org.name,
        domain: org.domain,
        content: orgContent.trim(),
        type: "company_overview",
        extracted_at: new Date().toISOString()
      });
    });

    // –ó —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π (Jira, Notion)
    chunkData.integrations.forEach(integration => {
      const integrationContent = `
        –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è: ${integration.name} (${integration.type})
        –°—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${integration.status}
        
        –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é:
        ${integration.type === 'jira' ? 
          `
        üéØ Jira —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è:
        - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
        - Workflow –ø—Ä–æ—Ü–µ—Å–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–ª–µ–π
        - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –ø–æ–ª—è —Ç–∞ –º—ñ—Ç–∫—ñ
        - –ó–≤—ñ—Ç–∏ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–æ –º—ñ–ª—å–Ω–æ—Å—Ç—è–º
        - –î–µ—Ñ–æ–ª—Ç–Ω—ñ —Å–ø–µ—Ä–µ—á–µ–Ω–∏–∫–∏ —Ç–∏–ø–∏ –∑–∞–≤–¥–∞–Ω—å (Task, Bug, Story, Epic)
        ` :
        `
        üìö Notion —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è:
        - –ë–∞–∑–∞ –∑–Ω–∞–Ω—å —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
        - –®–∞–±–ª–æ–Ω–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä
        - –°–ø—ñ–≤–ø—Ä–∞—Ü—ñ —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
        - –î–æ—Å—Ç—É–ø–Ω—ñ —à–∞–±–ª–æ–Ω–∏ —Ç–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        - SEO —Ç–∞ –º–µ—Ç–∞–¥–∞–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        `}
        
        –î–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏ —á–µ—Ä–µ–∑ —Ü—é —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –æ–ø–∏—Å—É—é—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü—ñ resources.
      `;
      
      knowledgeItems.push({
        source: "documinds",
        table: "integrations", 
        id: integration.id,
        name: integration.name,
        type: integration.type,
        content: integrationContent.trim(),
        integration_type: integration.type,
        extracted_at: new Date().toISOString()
      });
    });

    // –ó —Ä–µ—Å—É—Ä—Å—ñ–≤
    chunkData.resources.forEach(resource => {
      const resourceContent = `
        –†–µ—Å—É—Ä—Å: ${resource.name}
        –¢–∏–ø: ${resource.type}
        URL: ${resource.url}
        –°—Ç–∞—Ç—É—Å: ${resource.status}
        
        ${resource.type === 'page' ? 
          `
        üìÑ –î–æ–∫—É–º–µ–Ω—Ç:
        –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–∂–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –≤–∫–ª—é—á–∞—î –æ—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏, 
        –≥–∞–π–¥–ª–∞–π–Ω–∏ —Ç–∞ –Ω–∞–π–∫—Ä–∞—â—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∞—Å–ø–µ–∫—Ç—ñ–≤ —Ä–æ–±–æ—Ç–∏.
        ` :
          `
        üóÇÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:
        –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–∞ –¥–ª—è –ª–µ–≥–∫–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —Ç–∞ –ø–æ—à—É–∫—É.
        `}
        
        –¶–µ–π —Ä–µ—Å—É—Ä—Å –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ –¥–æ–∫—É–º–µ–Ω—Ç–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é –∫–æ–º–ø–∞–Ω—ñ—ó.
      `;
      
      knowledgeItems.push({
        source: "documinds",
        table: "resources",
        id: resource.id,
        name: resource.name,
        resource_type: resource.type,
        content: resourceContent.trim(),
        url: resource.url,
        extracted_at: new Date().toISOString()
      });
    });

    // –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É
    const basicKnowledge = [
      {
        content: `
        –ü—Ä–æ—Ü–µ—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–ø–∞–Ω—ñ—ó:
        
        1. –ü–µ—Ä—à–∏–π –¥–µ–Ω—å:
           - –ó–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑ –∫–æ–º–∞–Ω–¥–æ—é —Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
           - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è IT —Ç–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–∏—Å—Ç–µ–º
           - –û–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è –∑ –±–∞–∑–æ–≤–∏–º–∏ –ø—Ä–æ—Ü–µ—Å–∞–º–∏
        
        2. –ü–µ—Ä—à–∏–π —Ç–∏–∂–¥–µ–Ω—å:
           - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
           - –í–∏–≤—á–µ–Ω–Ω—è —Ü—ñ–ª–µ–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É
           - –ü–æ—á–∞—Ç–æ–∫ –≤–∏–≤—á–µ–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Å—Ç–µ–∫
            
        3. –î—Ä—É–≥–∏–π —Ç–∏–∂–¥–µ–Ω—å:
           - –ü—Ä–∞–∫—Ç–∏—á–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ø–µ—Ä—à–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
           - –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–µ –≤–∏–≤—á–µ–Ω–Ω—è –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏
           - –ö–æ–¥ —Ä–µ–≤-—é —Å —Å–µ–æ—Ä–Ω—ñ–æ—Ä —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞–º–∏
             
        4. –¢—Ä–µ—Ç—ñ–π —Ç–∏–∂–¥–µ–Ω—å:
           - –°–∞–º–æ—Å—Ç—ñ–π–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ–º
           - –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ
           - –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –ø–æ–≤–Ω–∏—Ö –æ–±–æ–≤'—è–∑–∫—ñ–≤
        `,
        metadata: {
          type: "onboarding_process",
          source: "company_standard",
          category: "HR"
        }
      },
      {
        content: `
        –¢–µ—Ö–Ω—ñ—á–Ω–∏–π —Å—Ç–µ–∫ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏:
        
        üèó Frontend —Ä–æ–∑—Ä–æ–±–∫–∞:
        - React –∑ TypeScript –¥–ª—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        - Next.js –¥–ª—è full-stack –¥–æ–¥–∞—Ç–∫—ñ–≤
        - Tailwind CSS –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó
        - Jest —Ç–∞ React Testing Library –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        
        ‚öôÔ∏è Backend —Ä–æ–∑—Ä–æ–±–∫–∞:
        - Python –∑ FastAPI –¥–ª—è REST API
        - PostgreSQL –¥–ª—è —Ä–µ–ª—è—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        - Redis –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ —á–µ—Ä–≥
        - Docker –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü—ñ—ó
        
        üîß DevOps —Ç–∞ Deploy:
        - Kubernetes –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
        - AWS –¥–ª—è —Ö–º–∞—Ä–Ω–æ—ó —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        - GitHub Actions –¥–ª—è CI/CD
        - Prometheus —Ç–∞ Grafana –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–∞
        
        üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ BI:
        - Jupyter Notebooks –¥–ª—è –µ–∫—Å–ø–ª–æ—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        - Tableau –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
        - Apache Airflow –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü—ñ—ó –¥–∞—Ç–∞ –ø–∞—ñ–ø–ª—ñ–Ω—ñ–≤
        `,
        metadata: {
          type: "tech_stack",
          source: "company_documentation",
          category: "Technology"
        }
      },
      {
        content: `
        –Ø–∫ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –∫–æ–¥–æ–º —Ç–∞ –ø—Ä–æ—Ü–µ—Å–∏ –∫–æ–º–∞–Ω–¥–∏:
        
        üìù –ö–æ–¥ —Ä–µ–≤—å—é –ø—Ä–æ—Ü–µ—Å:
        1. –°—Ç–≤–æ—Ä—ñ—Ç—å pull request –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –æ–ø–∏—Å–æ–º –∑–º—ñ–Ω
        2. –î–æ–¥–∞–π—Ç–µ review-—Ä—ñ–≤ –¥–ª—è —Å–µ–æ—Ä–Ω—ñ–æ—Ä-—ñ–≤ –∫–æ–º–∞–Ω–¥–∏
        3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ç–µ—Å—Ç–∏ —Ç–∞ CI/CD –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–∞—é—Ç—å –ø—Ä–æ–π—Ç–∏
        4. –ú—ñ–Ω—ñ–º—É–º 2 —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –º–µ—Ä–¥–∂–µ–º
        5. –í–∏—Ä—ñ—à–∏—Ç–µ –≤—Å—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —Ç–∞ –º—ñ—Ä–∫—É–≤–∞–Ω–Ω—è —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç—ñ–≤
        
        üèó –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏:
        - SOLID –ø—Ä–∏–Ω—Ü–∏–ø–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥—É
        - DRY (Don't Repeat Yourself)
        - –ü–∞—Ç–µ—Ä–Ω–∏ –¥–∏–∑–∞–π–Ω—É –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        - –ú—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å–Ω–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –º–æ–Ω–æ–±–∞–Ω–∫—ñ–≤
        
        üîÑ –ü—Ä–æ—Ü–µ—Å—É –∫–æ–º–∞–Ω–¥–∏ Agile:
        - Daily stand-ups —É—Å—ñ –¥–Ω—ñ –æ 10:00
        - Sprint planning —â–æ –¥–≤–∞ —Ç–∏–∂–Ω—ñ
        - Retrospectives –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤
        - Pair programming –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–¥–∞—á
        `,
        metadata: {
          type: "development_process",
          source: "development_guidelines",
          category: "Process"
        }
      }
    ];

    knowledgeItems.push(...basicKnowledge);

    console.log(`üìö –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ ${knowledgeItems.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–Ω–∞–Ω—å:`);
    console.log(`   - –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó: ${chunkData.organizations.length}`);
    console.log(`   - –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó: ${chunkData.integrations.length}`);
    console.log(`   - –†–µ—Å—É—Ä—Å–∏: ${chunkData.resources.length}`);
    console.log(`   - –ë–∞–∑–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è: ${basicKnowledge.length}`);

    return knowledgeItems;
  }

  async simulateVectorization(knowledgeItems) {
    console.log("\nüöÄ –°–∏–º—É–ª—è—Ü—ñ—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ Pinecone...");
    
    // –°–∏–º—É–ª—è—Ü—ñ—è chunking
    const chunks = [];
    knowledgeItems.forEach(item => {
      const content = item.content || '';
      if (content.length <= 1000) {
        chunks.push({ ...item, chunk_size: content.length, chunk_id: `chunk_${chunks.length}` });
      } else {
        // –ü—Ä–æ—Ä–æ–∑–±—ñ–≤–∞—î–º–æ –¥–æ–≤–≥—ñ —Ç–µ–∫—Å—Ç–∏ –Ω–∞ chunks
        const words = content.split(' ');
        const chunkSize = 200; // –ø—Ä–∏–±–ª–∏–∑–Ω–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤
        for (let i = 0; i < words.length; i += chunkSize) {
          const chunkContent = words.slice(i, i + chunkSize).join(' ');
          chunks.push({
            ...item,
            content: chunkContent,
            chunk_id: `chunk_${chunks.length}`,
            chunk_size: chunkContent.length
          });
        }
      }
    });

    console.log(`‚úÇÔ∏è –¢–µ–∫—Å—Ç —Ä–æ–∑–±–∏—Ç –Ω–∞ ${chunks.length} chunks:`);
    const chunkSizes = chunks.map(c => c.chunk_size);
    console.log(`   - –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä: ${Math.round(chunkSizes.reduce((a,b) => a+b, 0) / chunks.length)} —Å–∏–º–≤–æ–ª—ñ–≤`);
    console.log(`   - –ú—ñ–Ω. —Ä–æ–∑–º—ñ—Ä: ${Math.min(...chunkSizes)} —Å–∏–º–≤–æ–ª—ñ–≤`);
    console.log(`   - –ú–∞–∫—Å. —Ä–æ–∑–º—ñ—Ä: ${Math.max(...chunkSizes)} —Å–∏–º–≤–æ–ª—ñ–≤`);

    // –°–∏–º—É–ª—è—Ü—ñ—è embeddings
    console.log("\nüß† –°–∏–º—É–ª—è—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings —á–µ—Ä–µ–∑ OpenAI...");
    console.log(`üìä –ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ ${chunks.length} –≤–µ–∫—Ç–æ—Ä—ñ–≤ –∑ —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—é 3072 (text-embedding-3-large)`);
    console.log(`üíæ –û—Ü—ñ–Ω–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –≤ Pinecone: ${(chunks.length * 3072 * 4).toLocaleString()} –±–∞–π—Ç`);

    // –°–∏–º—É–ª—è—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Pinecone
    console.log("\nüóÑÔ∏è –°–∏–º—É–ª—è—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Pinecone...");
    const batchSize = 100;
    const batches = Math.ceil(chunks.length / batchSize);
    
    for (let i = 0; i < batches; i++) {
      const batch = chunks.slice(i * batchSize, (i + 1) * batchSize);
      console.log(`   üì¶ Batch ${i + 1}/${batches}: ${batch.length} –≤–µ–∫—Ç–æ—Ä—ñ–≤`);
    }

    return {
      total_chunks: chunks.length,
      batches_used: batches,
      estimated_storage_mb: Math.round((chunks.length * 3072 * 4) / 1024 / 1024),
      ready_for_query: true
    };
  }

  async demonstrateQuerying(vectorizedData) {
    console.log("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É...");
    
    const exampleQueries = [
      {
        question: "—è–∫ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É —è–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫",
        role: "Frontend Developer",
        expected_quality: "high"
      },
      {
        question: "–ø—Ä–æ—Ü–µ—Å –∫–æ–¥ —Ä–µ–≤'—é –≤ –∫–æ–º–ø–∞–Ω—ñ—ó",
        role: "general", 
        expected_quality: "high"
      },
      {
        question: "—Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Å—Ç–µ–∫ –¥–ª—è –µ–∫–≤—ñ–≤–∞–ª–µ—Ä–∏–∑–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ–∑–æ–º",
        role: "Data Analyst",
        expected_quality: "medium"
      },
      {
        question: "jira —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É",
        role: "general",
        expected_quality: "medium"
      }
    ];

    for (const query of exampleQueries) {
      console.log(`\n‚ùì –ó–∞–ø–∏—Ç: "${query.question}" (${query.role})`);
      
      // –°–∏–º—É–ª—è—Ü—ñ—è —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É
      const searchResults = [
        {
          content: "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ frontend —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤...",
          similarity_score: 0.87,
          source: "onboarding_process",
          relevance: "high"
        },
        {
          content: "–¢–µ—Ö–Ω—ñ—á–Ω–∏–π —Å—Ç–µ–∫ –∫–æ–º–ø–∞–Ω—ñ—ó –¥–ª—è frontend —Ä–æ–∑—Ä–æ–±–∫–∏...",
          similarity_score: 0.79,
          source: "tech_stack",
          relevance: "high"
        },
        {
          content: "–ö–æ–¥ —Ä–µ–≤—å—é –ø—Ä–æ—Ü–µ—Å–∏ —Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏ –∫–æ–º–∞–Ω–¥–∏...",
          similarity_score: 0.72,
          source: "development_process",
          relevance: "medium"
        }
      ];

      const filteredResults = searchResults.filter(r => r.similarity_score > 0.6);
      
      console.log(`üéØ –ó–Ω–∞–π–¥–µ–Ω–æ ${filteredResults.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:`);
      filteredResults.forEach((result, idx) => {
        console.log(`   ${idx + 1}. ${result.relevance} (${Math.round(result.similarity_score * 100)}%) - ${result.source}`);
      });
    }
  }

  async runFullTest() {
    console.log("üöÄ DocuMinds Vectorization Test");
    console.log("=" * 50);
    
    // 1. –¢–µ—Å—Ç DocuMinds —Å—Ö–µ–º—ã
    const documindsData = await this.testDocsSearch();
    
    // 2. –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const readyStatus = {
      documinds_content: documindsData.organizations.length > 0 || 
                        documindsData.integrations.length > 0 || 
                        documindsData.resources.length > 0,
      requires_setup: documindsData.organizations.length === 0 &&
                      documindsData.integrations.length === 0 &&
                      documindsData.resources.length === 0
    };
    
    if (readyStatus.requires_setup) {
      console.log("\n‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:");
      console.log("‚ùå DocuMinds —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Ä–æ–∂–Ω—ñ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π");
      console.log("\nüìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã:");
      console.log("1. üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JIRA_CLIENT_ID, JIRA_CLIENT_SECRET –≤ .env");
      console.log("2. üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NOTION_API_KEY –≤ .env");
      console.log("3. üìö –î–æ–±–∞–≤–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É organizations");
      console.log("4. üîó –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Jira –∏ Notion –≤ —Ç–∞–±–ª–∏—Ü–µ integrations");
      console.log("5. üìÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ resources");
      
      console.log("\nüé≠ –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∑–Ω–∞–Ω–∏–π...");
    }
    
    // 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π
    const knowledgeItems = this.generateSampleKnowledge(documindsData);
    
    // 4. –°–∏–º—É–ª—è—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const vectorizationResult = await this.simulateVectorization(knowledgeItems);
    
    // 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    await this.demonstrateQuerying(vectorizationResult);
    
    console.log("\nüéâ –¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!");
    
    // –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    if (readyStatus.documinds_content) {
      console.log("\n‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–Ω:")
      console.log("   - DocuMinds –∫–æ–Ω—Ç–µ–Ω—Ç: ‚úÖ –ò–º–µ–µ—Ç—Å—è");  
      console.log("   - –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ‚úÖ –í–æ–∑–º–æ–∂–Ω–∞");
      console.log("   - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç");
      console.log("   - AI –ø–æ–º—ñ—á–Ω–∏–∫: ‚úÖ –ì–æ—Ç–æ–≤");
    } else {
      console.log("\nüîß –î–ª—è –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:")
      console.log("   - DocuMinds –∫–æ–Ω—Ç–µ–Ω—Ç: ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞");
      console.log("   - –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞");  
      console.log("   - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: ‚úÖ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç");
      console.log("   - AI –ø–æ–º–æ—à–Ω–∏–∫: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–∑–æ–≤–æ–π –º–∞—Ç—Ä–∏—Ü–µ–π");
    }
    
    console.log("\nüí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:");
    console.log("üéØ JIRA: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É —Å —Ä–æ–ª—å-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏");
    console.log("üìö NOTION: –ü—Ä–∞–≤–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É");
    console.log("üß† –í–ï–ö–¢–û–†–ò: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏");
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  const tester = new DocuMindsVectorTester();
  tester.runFullTest().catch(console.error);
}

module.exports = DocuMindsVectorTester;
