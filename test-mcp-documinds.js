/**
 * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ DocuMinds —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π MCP —Å–µ—Ä–≤–µ—Ä: crystaldba/postgres-mcp
 */

const axios = require('axios');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è DocuMinds Supabase
const DOCUMINDS_CONFIG = {
  url: 'https://rbmepcfznvcskxayuisp.supabase.co',
  anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJibWVwY2Z6bnZjc2t4YXl1aXNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MjUzOTAsImV4cCI6MjA3NTAwMTM5MH0.ia2D4eT_VpqKApv4pdgTvHsvOCyR_XoCra73j2ElI9Y'
};

// MCP —Å–µ—Ä–≤–µ—Ä (–≤–∞—à —ñ—Å–Ω—É—é—á–∏–π PostgreSQL MCP)
const MCP_SERVER_URL = 'http://localhost:3002';

async function testDocuMindsConnection() {
  console.log('üîó –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ DocuMinds Supabase...');
  
  try {
    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ç–µ—Å—Ç—É—î–º–æ MCP —Å–µ—Ä–≤–µ—Ä
    console.log('\nüì° –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞...');
    try {
      const mcpResponse = await axios.get(MCP_SERVER_URL, { timeout: 5000 });
      console.log('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π');
      console.log(`   –°—Ç–∞—Ç—É—Å: ${mcpResponse.data?.status || 'OK'}`);
    } catch (error) {
      console.log('‚ö†Ô∏è  MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º—É –ø—Ä—è–º–µ Supabase API');
    }

    // –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ DocuMinds Supabase
    console.log('\nüè¢ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π –≤ DocuMinds...');
    const orgResponse = await axios.get(`${DOCUMINDS_CONFIG.url}/rest/v1/organizations`, {
      headers: {
        'apikey': DOCUMINDS_CONFIG.anonKey,
        'Authorization': `Bearer ${DOCUMINDS_CONFIG.anonKey}`,
        'Content-Type': 'application/json'
      },
      params: {
        select: 'id,name,domain,plan,status',
        limit: 3
      }
    });

    if (orgResponse.data && orgResponse.data.length > 0) {
      console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${orgResponse.data.length} –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π:`);
      orgResponse.data.forEach(org => {
        console.log(`   - ${org.name} (${org.domain || 'No domain'}) - ${org.plan} - ${org.status}`);
      });
    } else {
      console.log('‚ÑπÔ∏è  –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–æ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è');
    }

    // –¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π
    console.log('\nüîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π...');
    const integrationsResponse = await axios.get(`${DOCUMINDS_CONFIG.url}/rest/v1/integrations`, {
      headers: {
        'apikey': DOCUMINDS_CONFIG.anonKey,
        'Authorization': `Bearer ${DOCUMINDS_CONFIG.anonKey}`,
        'Content-Type': 'application/json'
      },
      params: {
        select: 'id,name,type,status,organization_id',
        limit: 5
      }
    });

    if (integrationsResponse.data && integrationsResponse.data.length > 0) {
      console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${integrationsResponse.data.length} —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π:`);
      integrationsResponse.data.forEach(integration => {
        console.log(`   - ${integration.name} (${integration.type}) - ${integration.status}`);
      });
    } else {
      console.log('‚ÑπÔ∏è  –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–æ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è');
    }

    // –¢–µ—Å—Ç —Ä–µ—Å—É—Ä—Å—ñ–≤
    console.log('\nüìÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤...');
    const resourcesResponse = await axios.get(`${DOCUMINDS_CONFIG.url}/rest/v1/resources`, {
      headers: {
        'apikey': DOCUMINDS_CONFIG.anonKey,
        'Authorization': `Bearer ${DOCUMINDS_CONFIG.anonKey}`,
        'Content-Type': 'application/json'
      },
      params: {
        select: 'id,name,type,url,integration_id',
        limit: 5
      }
    });

    if (resourcesResponse.data && resourcesResponse.data.length > 0) {
      console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${resourcesResponse.data.length} —Ä–µ—Å—É—Ä—Å—ñ–≤:`);
      resourcesResponse.data.forEach(resource => {
        console.log(`   - ${resource.name} (${resource.type}) - ${resource.url || 'No URL'}`);
      });
    } else {
      console.log('‚ÑπÔ∏è  –†–µ—Å—É—Ä—Å–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–æ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è');
    }

    console.log('\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è DocuMinds –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    console.log('\nüìù –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:');
    console.log('   1. –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –Ω–∞—à OnboardAI –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è–º–∏');
    console.log('   2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ MCP —Å–µ—Ä–≤–µ—Ä–∏ –¥–ª—è –∑–≤\'—è–∑–∫—É');
    console.log('   3. –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏');

    return true;

  } catch (error) {
    console.log(`‚ùå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–æ–π—à–ª–æ: ${error.message}`);
    if (error.response) {
      console.log(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.log(`   –î–∞–Ω—ñ: ${JSON.stringify(error.response.data)}`);
    }
    return false;
  }
}

async function testOnboardingIntegration() {
  console.log('\nüöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É...');
  
  try {
    // –°–∏–º—É–ª—é—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É –∑ real DocuMinds –¥–∞–Ω–∏–º–∏
    const employeeDomain = 'acme.com'; // –ü—Ä–∏–∫–ª–∞–¥ –¥–æ–º–µ–Ω—É

    // –®—É–∫–∞—î–º–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é –∑–∞ –¥–æ–º–µ–Ω–æ–º
    const orgResponse = await axios.get(`${DOCUMINDS_CONFIG.url}/rest/v1/organizations`, {
      headers: {
        'apikey': DOCUMINDS_CONFIG.anonKey,
        'Authorization': `Bearer ${DOCUMINDS_CONFIG.anonKey}`,
        'Content-Type': 'application/json'
      },
      params: {
        domain: `eq.${employeeDomain}`,
        select: 'id,name,domain,plan'
      }
    });

    if (orgResponse.data && orgResponse.data.length > 0) {
      const org = orgResponse.data[0];
      console.log(`‚úÖ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞: ${org.name}`);

      // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ—Å—É—Ä—Å–∏ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É
      const resourcesResponse = await axios.get(`${DOCUMINDS_CONFIG.url}/rest/v1/resources`, {
        headers: {
          'apikey': DOCUMINDS_CONFIG.anonKey,
          'Authorization': `Bearer ${DOCUMINDS_CONFIG.anonKey}`,
          'Content-Type': 'application/json'
        },
        params: {
          organization_id: `eq.${org.id}`,
          status: `eq.active`,
          select: 'id,name,type,url'
        }
      });

      if (resourcesResponse.data && resourcesResponse.data.length > 0) {
        console.log(`üìö –ó–Ω–∞–π–¥–µ–Ω–æ ${resourcesResponse.data.length} —Ä–µ—Å—É—Ä—Å—ñ–≤ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É:`);
        resourcesResponse.data.slice(0, 3).forEach(resource => {
          console.log(`   üìñ ${resource.name} (${resource.type})`);
        });
      }

      return {
        organization: org,
        resources: resourcesResponse.data || [],
        onboardingReady: true
      };

    } else {
      console.log(`‚ö†Ô∏è  –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é –∑ –¥–æ–º–µ–Ω–æ–º ${employeeDomain} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
      return {
        organization: null,
        resources: [],
        onboardingReady: false
      };
    }

  } catch (error) {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É: ${error.message}`);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
async function main() {
  console.log('üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó OnboardAI + DocuMinds');
  console.log('=' .repeat(60));
  
  const connectionTest = await testDocuMindsConnection();
  
  if (connectionTest) {
    await testOnboardingIntegration();
  }
  
  console.log('\n‚ú® –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüí° –î–ª—è —Ö–∞–∫–∞—Ç–æ–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:');
  console.log('   1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤–∞—à PostgreSQL MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–∞–Ω–∏—Ö');
  console.log('   2. –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ DocuMinds –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è–º–∏');
  console.log('   3. –î–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥');
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testDocuMindsConnection, testOnboardingIntegration };
