#!/usr/bin/env node
/**
 * –ü—Ä–∞–≤–∏–ª—å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è AI –∞–≥–µ–Ω—Ç–∞ –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ –∫—Ä–µ–¥–∏—Ç–∞–º–∏
 * –î–µ–º–æ–Ω—Å—Ç—Ä—É—î —è–∫ AI –∞–≥–µ–Ω—Ç –æ—Ç—Ä–∏–º—É—î –∫—Ä–µ–¥–∏—Ç–∏ –∑ DocuMinds –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó
 */

require('dotenv').config();
const axios = require('axios');

class CorrectAIAgent {
  constructor() {
    this.documindsConfig = {
      url: 'https://rbmepcfznvcskxayuisp.supabase.co',
      anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJibWVwY2Z6bnZjc2t4YXl1aXNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MjUzOTAsImV4cCI6MjA3NTAwMTM5MH0.ia2D4eT_VpqKApv4pdgTvHsvOCyR_XoCra73j2ElI9Y',
      apiUrl: 'https://rbmepcfznvcskxayuisp.supabase.co/rest/v1'
    };
  }

  async demonstrateCorrectImplementation() {
    console.log("ü§ñ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è AI –∞–≥–µ–Ω—Ç–∞ –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ –∫—Ä–µ–¥–∏—Ç–∞–º–∏");
    console.log("=" * 60);

    // –°—Ü–µ–Ω–∞—Ä—ñ—ó —Ä—ñ–∑–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π
    const scenarios = [
      {
        email: "ivan@techcorp.com",
        question: "–Ø–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏—Ü—å–∫–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ?",
        role: "Frontend Developer"
      },
      {
        email: "maria@financeflow.com", 
        question: "–Ø–∫—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ?",
        role: "Backend Developer"
      },
      {
        email: "alex@healthtech.com",
        question: "–Ø–∫ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä–æ–º?",
        role: "DevOps Engineer"
      }
    ];

    for (const scenario of scenarios) {
      await this.processScenario(scenario);
    }
  }

  async processScenario(scenario) {
    console.log(`\nüë§ –°—Ü–µ–Ω–∞—Ä—ñ–π: ${scenario.email}`);
    console.log(`‚ùì –ü–∏—Ç–∞–Ω–Ω—è: "${scenario.question}"`);
    console.log(`üëî –†–æ–ª—å: ${scenario.role}`);

    // 1. –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–º–ø–∞–Ω—ñ—é –∑ email
    const domain = scenario.email.split('@')[1];
    console.log(`\nüè¢ –ö—Ä–æ–∫ 1: –í–∏–∑–Ω–∞—á–µ–Ω–æ –¥–æ–º–µ–Ω –∫–æ–º–ø–∞–Ω—ñ—ó: ${domain}`);

    // 2. –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–æ –∑ DocuMinds
    console.log(`\nüîç –ö—Ä–æ–∫ 2: –ó–∞–ø–∏—Ç –¥–æ DocuMinds –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—Ä–µ–¥–∏—Ç—ñ–≤...`);
    const credentials = await this.getCompanyCredentials(domain);
    
    console.log(`üìä –û—Ç—Ä–∏–º–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–∏ –¥–ª—è ${domain}:`);
    console.log(`   üéØ Jira: ${credentials.jira ? credentials.jira.url : '–Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'}`);
    console.log(`   üìö Notion: ${credentials.notion ? credentials.notion.workspace : '–Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'}`);
    console.log(`   üîë Access Token: ${credentials.jira ? credentials.jira.access_token.substring(0, 20) + '...' : '–Ω–µ–º–∞—î'}`);

    // 3. –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
    console.log(`\nüìö –ö—Ä–æ–∫ 3: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Å–∏—Å—Ç–µ–º...`);
    const content = await this.fetchCompanyContent(domain, credentials);
    
    console.log(`üìä –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç:`);
    console.log(`   üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ñ–≤: ${content.documents.length}`);
    console.log(`   üéØ –ó–∞–¥–∞—á: ${content.tasks.length}`);
    console.log(`   üìö –†–µ—Å—É—Ä—Å—ñ–≤: ${content.resources.length}`);

    // 4. –í–µ–∫—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∫–æ–º–ø–∞–Ω—ñ—ó
    console.log(`\nüß† –ö—Ä–æ–∫ 4: –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó...`);
    const vectors = await this.vectorizeWithContext(content, domain);
    
    console.log(`üìä –°—Ç–≤–æ—Ä–µ–Ω–æ –≤–µ–∫—Ç–æ—Ä—ñ–≤: ${vectors.length}`);
    console.log(`üè∑Ô∏è –ú–µ—Ç–∞–¥–∞–Ω—ñ: organization=${domain}, role=${scenario.role}`);

    // 5. –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    console.log(`\nü§ñ –ö—Ä–æ–∫ 5: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è AI –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...`);
    const answer = await this.generateContextualAnswer(scenario.question, vectors, domain, scenario.role);
    
    console.log(`\nüí¨ AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å:`);
    console.log(`   ${answer.text}`);
    console.log(`   üìä –î–æ–≤—ñ—Ä–∞: ${answer.confidence}%`);
    console.log(`   üè¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${answer.context}`);
    console.log(`   üìö –î–∂–µ—Ä–µ–ª–∞: ${answer.sources.join(', ')}`);

    console.log(`\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: AI –∞–≥–µ–Ω—Ç –ø—Ä–∞—Ü—é–≤–∞–≤ –¢–Ü–õ–¨–ö–ò –∑ –¥–∞–Ω–∏–º–∏ ${domain}!`);
  }

  async getCompanyCredentials(domain) {
    // –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞–ø–∏—Ç—É –¥–æ DocuMinds –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—Ä–µ–¥–∏—Ç—ñ–≤ –∫–æ–º–ø–∞–Ω—ñ—ó
    console.log(`   üîç –ó–∞–ø–∏—Ç: SELECT * FROM organizations WHERE domain = '${domain}'`);
    
    // –°–∏–º—É–ª—è—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π –∫–æ–º–ø–∞–Ω—ñ–π
    const companyConfigs = {
      "techcorp.com": {
        organization: {
          id: "org-techcorp-uuid",
          name: "TechCorp",
          domain: domain,
          plan: "enterprise"
        },
        jira: {
          url: "https://techcorp.atlassian.net",
          access_token: "jira_token_for_techcorp_only_12345",
          project_key: "TECH"
        },
        notion: {
          workspace: "TechCorp Knowledge Base",
          api_key: "notion_key_for_techcorp_only_67890",
          database_id: "techcorp-db-uuid"
        }
      },
      "financeflow.com": {
        organization: {
          id: "org-financeflow-uuid", 
          name: "FinanceFlow",
          domain: domain,
          plan: "pro"
        },
        jira: {
          url: "https://financeflow.atlassian.net",
          access_token: "jira_token_for_financeflow_only_54321",
          project_key: "FIN"
        },
        notion: {
          workspace: "FinanceFlow Documentation",
          api_key: "notion_key_for_financeflow_only_09876",
          database_id: "financeflow-db-uuid"
        }
      },
      "healthtech.com": {
        organization: {
          id: "org-healthtech-uuid",
          name: "HealthTech Solutions", 
          domain: domain,
          plan: "enterprise"
        },
        jira: {
          url: "https://healthtech.atlassian.net",
          access_token: "jira_token_for_healthtech_only_11111",
          project_key: "HT"
        },
        notion: {
          workspace: "HealthTech Internal Docs",
          api_key: "notion_key_for_healthtech_only_22222",
          database_id: "healthtech-db-uuid"
        }
      }
    };

    const config = companyConfigs[domain];
    if (!config) {
      throw new Error(`–ö–æ–º–ø–∞–Ω—ñ—è –∑ –¥–æ–º–µ–Ω–æ–º ${domain} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ DocuMinds`);
    }

    console.log(`   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é: ${config.organization.name}`);
    console.log(`   üîç –ó–∞–ø–∏—Ç: SELECT * FROM integrations WHERE organization_id = '${config.organization.id}'`);
    console.log(`   üîç –ó–∞–ø–∏—Ç: SELECT * FROM integration_credentials WHERE integration_id = '...'`);

    return config;
  }

  async fetchCompanyContent(domain, credentials) {
    // –°–∏–º—É–ª—è—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
    console.log(`   üéØ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Jira: ${credentials.jira.url}`);
    console.log(`   üìö –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Notion: ${credentials.notion.workspace}`);
    
    // –°–∏–º—É–ª—è—Ü—ñ—è —Ä—ñ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π
    const contentByCompany = {
      "techcorp.com": {
        documents: [
          "React Development Guide",
          "API Documentation", 
          "UI Component Library"
        ],
        tasks: [
          "ONBD-001: Setup development environment",
          "ONBD-002: Learn React components",
          "ONBD-003: API integration"
        ],
        resources: [
          "TechCorp Knowledge Base - Setup Guide",
          "TechCorp Knowledge Base - UI Components"
        ]
      },
      "financeflow.com": {
        documents: [
          "Python Best Practices",
          "Database Schema Documentation",
          "Security Protocols"
        ],
        tasks: [
          "FIN-001: Setup Python environment",
          "FIN-002: Database connection",
          "FIN-003: Security compliance"
        ],
        resources: [
          "FinanceFlow Documentation - Python Guide",
          "FinanceFlow Documentation - Database Setup"
        ]
      },
      "healthtech.com": {
        documents: [
          "Java Development Guidelines",
          "Healthcare Compliance",
          "Security Protocols"
        ],
        tasks: [
          "HT-001: Setup Java environment",
          "HT-002: Healthcare compliance training",
          "HT-003: Security protocols"
        ],
        resources: [
          "HealthTech Internal Docs - Java Guidelines",
          "HealthTech Internal Docs - Security"
        ]
      }
    };

    return contentByCompany[domain] || { documents: [], tasks: [], resources: [] };
  }

  async vectorizeWithContext(content, domain) {
    // –°–∏–º—É–ª—è—Ü—ñ—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
    console.log(`   üß† –°—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings –∑ OpenAI...`);
    console.log(`   üìä –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö: organization=${domain}`);
    
    const vectors = [];
    const allContent = [...content.documents, ...content.tasks, ...content.resources];
    
    for (const item of allContent) {
      vectors.push({
        id: `vector_${Math.random().toString(36).substr(2, 9)}`,
        content: item,
        metadata: {
          organization: domain,
          type: content.documents.includes(item) ? 'document' : 
                content.tasks.includes(item) ? 'task' : 'resource',
          source: domain === 'techcorp.com' ? 'TechCorp Knowledge Base' :
                 domain === 'financeflow.com' ? 'FinanceFlow Documentation' :
                 'HealthTech Internal Docs'
        },
        embedding: `embedding_${Math.random().toString(36).substr(2, 9)}`
      });
    }

    console.log(`   üìä –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Pinecone –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º organization='${domain}'`);
    return vectors;
  }

  async generateContextualAnswer(question, vectors, domain, role) {
    // –°–∏–º—É–ª—è—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    console.log(`   ü§ñ –ê–Ω–∞–ª—ñ–∑ –ø–∏—Ç–∞–Ω–Ω—è: "${question}"`);
    console.log(`   üè¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–ø–∞–Ω—ñ—ó: ${domain}`);
    console.log(`   üëî –†–æ–ª—å —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞: ${role}`);
    
    // –°–∏–º—É–ª—è—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π
    const answersByCompany = {
      "techcorp.com": {
        text: `–î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ä–æ–±–Ω–∏—Ü—å–∫–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤ TechCorp:\n\n1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Node.js —Ç–∞ npm\n2. –ö–ª–æ–Ω—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –ø—Ä–æ–µ–∫—Ç—É\n3. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: npm install\n4. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ React —Ç–∞ TypeScript\n5. –ü—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –¥–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ VPN\n\n–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ TechCorp Knowledge Base.`,
        confidence: 92,
        context: "TechCorp Frontend Development",
        sources: ["TechCorp Knowledge Base - Setup Guide", "ONBD-001"]
      },
      "financeflow.com": {
        text: `–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è –≤ FinanceFlow:\n\n1. PEP 8 –¥–ª—è Python –∫–æ–¥—É\n2. Type hints –¥–ª—è –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π\n3. Docstrings –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó\n4. Pytest –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è\n5. Black –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è\n\n–í—Å—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤–∞–Ω—ñ –≤ FinanceFlow Documentation.`,
        confidence: 95,
        context: "FinanceFlow Backend Development", 
        sources: ["FinanceFlow Documentation - Python Guide", "FIN-002"]
      },
      "healthtech.com": {
        text: `–†–æ–±–æ—Ç–∞ –∑ Kubernetes –≤ HealthTech Solutions:\n\n1. Helm charts –¥–ª—è –¥–µ–ø–ª–æ—é\n2. Istio –¥–ª—è service mesh\n3. Prometheus –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n4. Falco –¥–ª—è security\n5. Grafana –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó\n\n–î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –≤ HealthTech Internal Docs.`,
        confidence: 90,
        context: "HealthTech DevOps Operations",
        sources: ["HealthTech Internal Docs - Kubernetes Guide", "HT-003"]
      }
    };

    const answer = answersByCompany[domain];
    if (!answer) {
      return {
        text: `–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É –≤ —Å–∏—Å—Ç–µ–º—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏.`,
        confidence: 75,
        context: `${domain} General`,
        sources: [`${domain} Documentation`]
      };
    }

    return answer;
  }

  async demonstrateSecurityBenefits() {
    console.log("\nüõ°Ô∏è –ü–µ—Ä–µ–≤–∞–≥–∏ –±–µ–∑–ø–µ–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏");
    console.log("=" * 50);

    console.log("‚úÖ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∞ —ñ–∑–æ–ª—è—Ü—ñ—è:");
    console.log("   - –ö–æ–∂–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è –º–∞—î –≤–ª–∞—Å–Ω—ñ –∫—Ä–µ–¥–∏—Ç–∏");
    console.log("   - AI –∞–≥–µ–Ω—Ç –ù–ï –º–æ–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–∏—Å—è –º—ñ–∂ –∫–æ–º–ø–∞–Ω—ñ—è–º–∏");
    console.log("   - –î–∞–Ω—ñ –æ–¥–Ω—ñ—î—ó –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—à—ñ–π");

    console.log("\n‚úÖ –î–∏–Ω–∞–º—ñ—á–Ω—ñ –∫—Ä–µ–¥–∏—Ç–∏:");
    console.log("   - –ö—Ä–µ–¥–∏—Ç–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ DocuMinds integration_credentials");
    console.log("   - AI –∞–≥–µ–Ω—Ç –æ—Ç—Ä–∏–º—É—î —ó—Ö —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ");
    console.log("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ OAuth refresh");

    console.log("\n‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è:");
    console.log("   - –ö–æ–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä –º–∞—î –º–µ—Ç–∞–¥–∞–Ω—ñ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó");
    console.log("   - –ü–æ—à—É–∫ —Ñ—ñ–ª—å—Ç—Ä—É—î—Ç—å—Å—è –ø–æ organization_id");
    console.log("   - –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —ñ–Ω—à–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó");

    console.log("\n‚úÖ –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∫—Ä–µ–¥–∏—Ç—ñ–≤:");
    console.log("   - AI –∞–≥–µ–Ω—Ç –ù–ï –º–∞—î –≤–ª–∞—Å–Ω–∏—Ö –∫—Ä–µ–¥–∏—Ç—ñ–≤ –¥–æ Jira/Notion");
    console.log("   - –í—Å—ñ –¥–æ—Å—Ç—É–ø—ñ —á–µ—Ä–µ–∑ DocuMinds integration_credentials");
    console.log("   - –ö–æ–º–ø–∞–Ω—ñ—ó –∫–æ–Ω—Ç—Ä–æ–ª—é—é—Ç—å –≤–ª–∞—Å–Ω—ñ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó");
  }

  async runFullDemo() {
    console.log("ü§ñ Correct AI Agent Implementation Demo");
    console.log("=" * 50);

    await this.demonstrateCorrectImplementation();
    await this.demonstrateSecurityBenefits();

    console.log("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    console.log("\nüí° –í–∏—Å–Ω–æ–≤–æ–∫:");
    console.log("‚úÖ AI –∞–≥–µ–Ω—Ç –æ—Ç—Ä–∏–º—É—î –∫—Ä–µ–¥–∏—Ç–∏ –î–ò–ù–ê–ú–Ü–ß–ù–û –∑ DocuMinds");
    console.log("‚úÖ –ö–æ–∂–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è –º–∞—î –≤–ª–∞—Å–Ω—ñ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Ç–∞ –∫—Ä–µ–¥–∏—Ç–∏");
    console.log("‚úÖ –ü–æ–≤–Ω–∞ —ñ–∑–æ–ª—è—Ü—ñ—è –¥–∞–Ω–∏—Ö –º—ñ–∂ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è–º–∏");
    console.log("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –¥–∂–µ—Ä–µ–ª–æ–º");
    console.log("‚úÖ Enterprise-ready –±–µ–∑–ø–µ–∫–∞ —Ç–∞ compliance");
    
    console.log("\nüöÄ –ì–æ—Ç–æ–≤–æ –¥–ª—è production deployment!");
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
if (require.main === module) {
  const demo = new CorrectAIAgent();
  demo.runFullDemo().catch(console.error);
}

module.exports = CorrectAIAgent;
